}
bf_act_01[[i]]<-exp(l_bf_act_01[[i]])
Decision_bf_act_01[[i]]<-ifelse(bf_act_01[[i]] > 1, "Fail to Reject H_0",ifelse( bf_act_01[[i]] <= 1 & bf_act_01 [[i]] > (1/3), "Weak evidence against H_0",ifelse(bf_act_01[[i]] <= (1/3) & bf_act_01[[i]] > (1/10), "Moderate evidence against H_0", ifelse(bf_act_01[[i]] <= (1/10) & bf_act_01[[i]] > (1/30), "Substantial evidence against H_0",ifelse(bf_act_01 [[i]]<= (1/30) & bf_act_01 [[i]] > (1/100), " Strong evidence against H_0", ifelse(bf_act_01 [[i]] <= (1/100) & bf_act_01 [[i]] > (1/300), "Very strong evidence against H_0", "Decisive evidence against H_0"))))))
Decision_bf_act_01_new[[i]]<-ifelse(Decision_bf_act_01[[i]] == "Fail to Reject H_0" | Decision_bf_act_01[[i]] == "Weak evidence against H_0", "Random", "Sig")
Decision_bf_act_01_new[[i]] <-factor(Decision_bf_act_01_new[[i]],levels = c("Sig","Random"))
Decision_bf_act_01_logFC[[i]]<-ifelse(Decision_bf_act_01_new[[i]] == "Sig" &
abs(log_fold_change[[i]]) > log(1.5), "Regulated",
"Random")
Decision_bf_act_01_logFC[[i]]<-factor(Decision_bf_act_01_logFC[[i]],
levels = c("Regulated","Random"))
}
Regulation_new<-ifelse(gene_metadata_clust1_short !=0, "Sig","Random")
c<-rep(list(data.frame()),nlevels(dose_level)-1)
names(c)<-levels(dose_level)[-1]
confusionMatrix_bf_act_01<-rep(list(list()),nlevels(dose_level)-1)
names(confusionMatrix_bf_act_01)<-levels(dose_level)[-1]
c[[i]]<-data.frame(bf_act_01[[i]],Decision_bf_act_01_new[[i]],
Regulation_new$abs_FC,Decision_bf_act_01_logFC[[i]],
gene_metadata_clust1_short$abs_fc)
l_bf_act_01<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
bf_act_01<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01<- rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_new<- rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_logFC<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
log_fold_change<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
names(l_bf_act_01)<-levels(dose_level)[-1]
names(bf_act_01)<-levels(dose_level)[-1]
names(Decision_bf_act_01)<-levels(dose_level)[-1]
names(log_fold_change)<-levels(dose_level)[-1]
names(Decision_bf_act_01_new)<-levels(dose_level)[-1]
names(Decision_bf_act_01_logFC)<-levels(dose_level)[-1]
for (i in levels(dose_level)[-1])
{
for(k in 1: nrow(data[["0"]]))
{
l_bf_act_01[[i]][k]<-bf_actual_01[[i]][[k]]$l_Bayes_factor_01
log_fold_change[[i]][k] = logFC(data[["0"]][k,],data[[i]][k,])
}
bf_act_01[[i]]<-exp(l_bf_act_01[[i]])
Decision_bf_act_01[[i]]<-ifelse(bf_act_01[[i]] > 1, "Fail to Reject H_0",ifelse( bf_act_01[[i]] <= 1 & bf_act_01 [[i]] > (1/3), "Weak evidence against H_0",ifelse(bf_act_01[[i]] <= (1/3) & bf_act_01[[i]] > (1/10), "Moderate evidence against H_0", ifelse(bf_act_01[[i]] <= (1/10) & bf_act_01[[i]] > (1/30), "Substantial evidence against H_0",ifelse(bf_act_01 [[i]]<= (1/30) & bf_act_01 [[i]] > (1/100), " Strong evidence against H_0", ifelse(bf_act_01 [[i]] <= (1/100) & bf_act_01 [[i]] > (1/300), "Very strong evidence against H_0", "Decisive evidence against H_0"))))))
Decision_bf_act_01_new[[i]]<-ifelse(Decision_bf_act_01[[i]] == "Fail to Reject H_0" | Decision_bf_act_01[[i]] == "Weak evidence against H_0", "Random", "Sig")
Decision_bf_act_01_new[[i]] <-factor(Decision_bf_act_01_new[[i]],levels = c("Sig","Random"))
Decision_bf_act_01_logFC[[i]]<-ifelse(Decision_bf_act_01_new[[i]] == "Sig" &
abs(log_fold_change[[i]]) > log(1.5), "Regulated",
"Random")
Decision_bf_act_01_logFC[[i]]<-factor(Decision_bf_act_01_logFC[[i]],
levels = c("Regulated","Random"))
}
Regulation_new<-ifelse(gene_metadata_clust1_short !=0, "Sig","Random")
c<-rep(list(data.frame()),nlevels(dose_level)-1)
names(c)<-levels(dose_level)[-1]
confusionMatrix_bf_act_01<-rep(list(list()),nlevels(dose_level)-1)
names(confusionMatrix_bf_act_01)<-levels(dose_level)[-1]
for(i in levels(dose_level)[-1])
{
c[[i]]<-data.frame(bf_act_01[[i]],Decision_bf_act_01_new[[i]],
Regulation_new,Decision_bf_act_01_logFC[[i]],
gene_metadata_clust1_short$abs_fc)
confusionMatrix_bf_act_01[[i]]<-caret::confusionMatrix(c[[i]]$Decision_bf_act_01_new..i..,
factor(c[[i]]$abs_fc,
levels = c("Sig","Random")))
colnames(c[[i]])<-c("BF_Test_Statistic","Pred Decision","True Decision","Pred Regulation",
"True Regulation")
rownames(c[[i]])<-rownames(data[["0"]])
}
#Save the list as a csv file
#lapply(c, function(x) write.table( data.frame(x), 'test.csv'  , append= T, sep=',' ))
capture.output(c, file = "test_file.txt")
capture.output(confusionMatrix_bf_act_01, file = "test_file_confusionMatrix.txt")
confusionMatrix_bf_act_01[["10"]]
confusionMatrix_bf_act_01
confusionMatrix_bf_act_01
ggpubr::ggarrange(k0,k1,ncol=2,nrow=1)
ggpubr::ggarrange(k0,k1,ncol=2,nrow=1, labels = "Complete Data","Positive Data")
ggpubr::ggarrange(k0,k1,ncol=2,nrow=1, labels = "Complete Data","Positive Data")
ggpubr::ggarrange(k0,k1,ncol=2,nrow=1)
ggpubr::ggarrange(k0,k1,ncol=2,nrow=1)
ggpubr::ggarrange(a1,a2,a3,a4,a5,a6,a7,a8,a9,
ncol = 3, nrow = 3)
library(data.table)
data_table<-rep(list(data.frame()), nlevels(dose_level))
names(data_table)<-levels(dose_level)
for(i in levels(dose_level))
{
data_table[[i]]<-as.data.table(t(data[[i]]))
}
library(ggplot2)
theme_set(theme_bw())
a1<-qplot(Mup11, data = data_table[["0"]][Mup11 < quantile(as.numeric(data_table[["0"]]$Mup11), probs = .95)])
a2<-qplot(Mup11, data = data_table[["0.01"]][Mup11 < quantile(as.numeric(data_table[["0.01"]]$Mup11), probs = .95)])
a3<-qplot(Mup11, data = data_table[["0.03"]][Mup11 < quantile(as.numeric(data_table[["0.03"]]$Mup11), probs = .95)])
a4<-qplot(Mup11, data = data_table[["0.1"]][Mup11 < quantile(as.numeric(data_table[["0.1"]]$Mup11), probs = .95)])
a5<-qplot(Mup11, data = data_table[["0.3"]][Mup11 < quantile(as.numeric(data_table[["0.3"]]$Mup11), probs = .95)])
a6<-qplot(Mup11, data = data_table[["1"]][Mup11 < quantile(as.numeric(data_table[["1"]]$Mup11), probs = .95)])
a7<-qplot(Mup11, data = data_table[["3"]][Mup11 < quantile(as.numeric(data_table[["3"]]$Mup11), probs = .95)])
a8<-qplot(Mup11, data = data_table[["10"]][Mup11 < quantile(as.numeric(data_table[["10"]]$Mup11), probs = .95)])
a9<-qplot(Mup11, data = data_table[["30"]][Mup11 < quantile(as.numeric(data_table[["30"]]$Mup11), probs = .95)])
ggpubr::ggarrange(a1,a2,a3,a4,a5,a6,a7,a8,a9,
ncol = 3, nrow = 3)
ggpubr::ggarrange(a1,a2,a3,a4,a5,a6,a7,a8,a9,
ncol = 3, nrow = 3)
library(MASS)
for(i in levels(dose_level))
{
data_table[[i]]<- data_table[[i]][, Mup11_pos := ifelse(Mup11 > 0, Mup11, NA)]
}
b1<-ggplot(data_table[["0"]], aes(x = Mup11_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["0"]][Mup11 > 0 ,Mup11_pos ], "normal")$estimate)
b2<-ggplot(data_table[["0.01"]], aes(x = Mup11_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["0.01"]][Mup11 > 0 ,Mup11_pos ], "normal")$estimate)
b3<-ggplot(data_table[["0.03"]], aes(x = Mup11_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["0.03"]][Mup11 > 0 ,Mup11_pos ], "normal")$estimate)
b4<-ggplot(data_table[["0.1"]], aes(x = Mup11_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["0.1"]][Mup11 > 0 ,Mup11_pos ], "normal")$estimate)
b5<-ggplot(data_table[["0.3"]], aes(x = Mup11_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["0.3"]][Mup11 > 0 ,Mup11_pos ], "normal")$estimate)
b6<-ggplot(data_table[["1"]], aes(x = Mup11_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["1"]][Mup11 > 0 ,Mup11_pos ], "normal")$estimate)
b7<-ggplot(data_table[["3"]], aes(x = Mup11_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["3"]][Mup11 > 0 ,Mup11_pos ], "normal")$estimate)
b8<-ggplot(data_table[["10"]], aes(x = Mup11_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["10"]][Mup11 > 0 ,Mup11_pos ], "normal")$estimate)
b9<-ggplot(data_table[["30"]], aes(x = Mup11_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["30"]][Mup11 > 0 ,Mup11_pos ], "normal")$estimate)
ggpubr::ggarrange(b1,b2,b3,b4,b5,b6,b7,b8,b9,
ncol = 3, nrow = 3)
library(ggplot2)
theme_set(theme_bw())
a1<-qplot(Hao1, data = data_table[["0"]][Hao1 < quantile(as.numeric(data_table[["0"]]$Hao1), probs = .99)])+ ggtitle("Dose = 0")
a2<-qplot(Hao1, data = data_table[["0.01"]][Hao1 < quantile(as.numeric(data_table[["0.01"]]$Hao1), probs = .99)])+ ggtitle("Dose = 0.01")
a3<-qplot(Hao1, data = data_table[["0.03"]][Hao1 < quantile(as.numeric(data_table[["0.03"]]$Hao1), probs = .99)])+ ggtitle("Dose = 0.03")
a4<-qplot(Hao1, data = data_table[["0.1"]][Hao1 < quantile(as.numeric(data_table[["0.1"]]$Hao1), probs = .99)])+ ggtitle("Dose = 0.1")
a5<-qplot(Hao1, data = data_table[["0.3"]][Hao1 < quantile(as.numeric(data_table[["0.3"]]$Hao1), probs = .99)])+ ggtitle("Dose = 0.3")
a6<-qplot(Hao1, data = data_table[["1"]][Hao1 < quantile(as.numeric(data_table[["1"]]$Hao1), probs = .99)])+ ggtitle("Dose = 1")
a7<-qplot(Hao1, data = data_table[["3"]][Hao1 < quantile(as.numeric(data_table[["3"]]$Hao1), probs = .99)])+ ggtitle("Dose = 3")
a8<-qplot(Hao1, data = data_table[["10"]][Hao1 < quantile(as.numeric(data_table[["10"]]$Hao1), probs = .99)])+ ggtitle("Dose = 10")
a9<-qplot(Hao1, data = data_table[["30"]][Hao1 < quantile(as.numeric(data_table[["30"]]$Hao1), probs = .99)])+ ggtitle("Dose = 30")
ggpubr::ggarrange(a1,a2,a3,a4,a5,a6,a7,a8,a9,
ncol = 3, nrow = 3)
for(i in levels(dose_level))
{
data_table[[i]]<- data_table[[i]][, Hao1_pos := ifelse(Hao1 > 0, Hao1, NA)]
}
b1<-ggplot(data_table[["0"]], aes(x = Hao1_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["0"]][Hao1 > 0 ,Hao1_pos ], "normal")$estimate)+ ggtitle("Dose = 0")
b2<-ggplot(data_table[["0.01"]], aes(x = Hao1_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["0.01"]][Hao1 > 0 ,Hao1_pos ], "normal")$estimate)+ ggtitle("Dose = 0.01")
b3<-ggplot(data_table[["0.03"]], aes(x = Hao1_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["0.03"]][Hao1 > 0 ,Hao1_pos ], "normal")$estimate)+ ggtitle("Dose = 0.03")
b4<-ggplot(data_table[["0.1"]], aes(x = Hao1_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["0.1"]][Hao1 > 0 ,Hao1_pos ], "normal")$estimate)+ ggtitle("Dose = 0.1")
b5<-ggplot(data_table[["0.3"]], aes(x = Hao1_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["0.3"]][Hao1 > 0 ,Hao1_pos ], "normal")$estimate)+ ggtitle("Dose = 0.3")
b6<-ggplot(data_table[["1"]], aes(x = Hao1_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["1"]][Hao1 > 0 ,Hao1_pos ], "normal")$estimate)+ ggtitle("Dose = 1")
b7<-ggplot(data_table[["3"]], aes(x = Hao1_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["3"]][Hao1 > 0 ,Hao1_pos ], "normal")$estimate)+ ggtitle("Dose = 3")
b8<-ggplot(data_table[["10"]], aes(x = Hao1_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["10"]][Hao1 > 0 ,Hao1_pos ], "normal")$estimate)+ ggtitle("Dose = 10")
b9<-ggplot(data_table[["30"]], aes(x = Hao1_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(data_table[["30"]][Hao1 > 0 ,Hao1_pos ], "normal")$estimate)+ ggtitle("Dose = 30")
ggpubr::ggarrange(b1,b2,b3,b4,b5,b6,b7,b8,b9,
ncol = 3, nrow = 3)
normalized_clust1_short_df <-as.data.table(t(normalized_clust1_short))
k0<-qplot(Hao1, data = normalized_clust1_short_df[Hao1 < quantile(as.numeric(normalized_clust1_short_df$Hao1), probs = .95)])
normalized_clust1_short_df<- normalized_clust1_short_df[, Hao1_pos := ifelse(Hao1 > 0, Hao1, NA)]
k1<-ggplot(normalized_clust1_short_df, aes(x = Hao1_pos)) +
geom_histogram(aes(y = ..density..), colour = "black", fill = "White") +
stat_function(fun = dnorm, args = fitdistr(normalized_clust1_short_df[Hao1 > 0 ,Hao1_pos ], "normal")$estimate)
ggpubr::ggarrange(k0,k1,ncol=2,nrow=1)
ggpubr::ggarrange(k0,k1,ncol=2,nrow=1)
confusionMatrix_bf_act_01
# library
#Confusion Matrix Plot
library(ggplot2)
# create a dataset
dose <- c(rep(0.01 , 4) , rep(0.03 , 4) , rep(0.1 , 4) , rep(0.3 , 4) , rep(1 , 4),rep(3 , 4) ,
rep(10 , 4),rep(30 , 4)  )
type <- rep(c("TP" , "FP" , "FN","TN") , 8)
value1<-c(7,0,93,100,17,3,83,97,7,0,93,100,23,1,77,99,28,1,72,99,29,2,71,98,60,13,40,87,71,40,29,60)
value2<-c(6,0,76,54,17,3,65,51,7,0,75,54,23,1,59,53,28,1,54,53,28,2,54,52,60,12,22,42,71,40,11,14)
cf <- data.frame(dose,type,value1,valu2)
# library
#Confusion Matrix Plot
library(ggplot2)
# create a dataset
dose <- c(rep(0.01 , 4) , rep(0.03 , 4) , rep(0.1 , 4) , rep(0.3 , 4) , rep(1 , 4),rep(3 , 4) ,
rep(10 , 4),rep(30 , 4)  )
type <- rep(c("TP" , "FP" , "FN","TN") , 8)
value1<-c(7,0,93,100,17,3,83,97,7,0,93,100,23,1,77,99,28,1,72,99,29,2,71,98,60,13,40,87,71,40,29,60)
value2<-c(6,0,76,54,17,3,65,51,7,0,75,54,23,1,59,53,28,1,54,53,28,2,54,52,60,12,22,42,71,40,11,14)
cf <- data.frame(dose,type,value1,value2)
prior_Alter[1]
# Grouped
g1<-ggplot(cf, aes(fill=type, y=value, x=as.factor(dose))) +
geom_text(aes(label=value1), position = position_dodge(width=1),
size=3,vjust = -0.5)+ geom_bar(position="dodge", stat="identity")+
xlab("Dose")+ ylab("Confusion Matrix Values")+
ggtitle("tau_mu = 1, P(H_a)= 0.003, unfiltered data")+
theme(plot.title = element_text(color="red", size=10, face="bold.italic"))
g2<-ggplot(cf, aes(fill=type, y=value2, x=as.factor(dose))) +
geom_text(aes(label=value2), position = position_dodge(width=1),
size=3,vjust = -0.5)+ geom_bar(position="dodge", stat="identity")+
xlab("Dose")+ ylab("Confusion Matrix Values")+
ggtitle("tau_mu = 1, P(H_a)= 0.003, filtered data")+
theme(plot.title = element_text(color="red", size=10, face="bold.italic"))
g1
g2
log_fold_change
abs(log_fold_change)
mean(abs(log_fold_change[["0"]]))
log_fold_change[["0"]]
log_fold_change
log_fold_change[[0.01]]
log_fold_change[["0.01"]]
mean(abs(log_fold_change[["0.01"]]))
median(abs(log_fold_change[["0.01"]]))
abs_log_fold_change_mean<-vector()
l_bf_act_01<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
bf_act_01<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01<- rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_new<- rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_logFC<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
log_fold_change<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
names(l_bf_act_01)<-levels(dose_level)[-1]
names(bf_act_01)<-levels(dose_level)[-1]
names(Decision_bf_act_01)<-levels(dose_level)[-1]
names(log_fold_change)<-levels(dose_level)[-1]
names(Decision_bf_act_01_new)<-levels(dose_level)[-1]
names(Decision_bf_act_01_logFC)<-levels(dose_level)[-1]
for (i in levels(dose_level)[-1])
{
for(k in 1: nrow(data[["0"]]))
{
l_bf_act_01[[i]][k]<-bf_actual_01[[i]][[k]]$l_Bayes_factor_01
log_fold_change[[i]][k] = logFC(data[["0"]][k,],data[[i]][k,])
}
bf_act_01[[i]]<-exp(l_bf_act_01[[i]])
Decision_bf_act_01[[i]]<-ifelse(bf_act_01[[i]] > 1, "Fail to Reject H_0",ifelse( bf_act_01[[i]] <= 1 & bf_act_01 [[i]] > (1/3), "Weak evidence against H_0",ifelse(bf_act_01[[i]] <= (1/3) & bf_act_01[[i]] > (1/10), "Moderate evidence against H_0", ifelse(bf_act_01[[i]] <= (1/10) & bf_act_01[[i]] > (1/30), "Substantial evidence against H_0",ifelse(bf_act_01 [[i]]<= (1/30) & bf_act_01 [[i]] > (1/100), " Strong evidence against H_0", ifelse(bf_act_01 [[i]] <= (1/100) & bf_act_01 [[i]] > (1/300), "Very strong evidence against H_0", "Decisive evidence against H_0"))))))
Decision_bf_act_01_new[[i]]<-ifelse(Decision_bf_act_01[[i]] == "Fail to Reject H_0" | Decision_bf_act_01[[i]] == "Weak evidence against H_0", "Random", "Sig")
Decision_bf_act_01_new[[i]] <-factor(Decision_bf_act_01_new[[i]],levels = c("Sig","Random"))
abs_log_fold_change_mean[i]<-median(abs(log_fold_change[[i]]))
Decision_bf_act_01_logFC[[i]]<-ifelse(Decision_bf_act_01_new[[i]] == "Sig" &
abs(log_fold_change[[i]]) > log(1.5), "Regulated",
"Random")
Decision_bf_act_01_logFC[[i]]<-factor(Decision_bf_act_01_logFC[[i]],
levels = c("Regulated","Random"))
}
Regulation_new<-ifelse(gene_metadata_clust1_short !=0, "Sig","Random")
c<-rep(list(data.frame()),nlevels(dose_level)-1)
names(c)<-levels(dose_level)[-1]
confusionMatrix_bf_act_01<-rep(list(list()),nlevels(dose_level)-1)
names(confusionMatrix_bf_act_01)<-levels(dose_level)[-1]
for(i in levels(dose_level)[-1])
{
c[[i]]<-data.frame(bf_act_01[[i]],Decision_bf_act_01_new[[i]],
Regulation_new,Decision_bf_act_01_logFC[[i]],
gene_metadata_clust1_short$abs_fc)
confusionMatrix_bf_act_01[[i]]<-caret::confusionMatrix(c[[i]]$Decision_bf_act_01_new..i..,
factor(c[[i]]$abs_fc,
levels = c("Sig","Random")))
colnames(c[[i]])<-c("BF_Test_Statistic","Pred Decision","True Decision","Pred Regulation",
"True Regulation")
rownames(c[[i]])<-rownames(data[["0"]])
}
#Save the list as a csv file
#lapply(c, function(x) write.table( data.frame(x), 'test.csv'  , append= T, sep=',' ))
capture.output(c, file = "test_file.txt")
capture.output(confusionMatrix_bf_act_01, file = "test_file_confusionMatrix.txt")
confusionMatrix_bf_act_01
abs_log_fold_change_mean
abs_log_fold_change_mean<-vector
l_bf_act_01<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
bf_act_01<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01<- rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_new<- rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_logFC<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
log_fold_change<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
names(l_bf_act_01)<-levels(dose_level)[-1]
names(bf_act_01)<-levels(dose_level)[-1]
names(Decision_bf_act_01)<-levels(dose_level)[-1]
names(log_fold_change)<-levels(dose_level)[-1]
names(Decision_bf_act_01_new)<-levels(dose_level)[-1]
names(Decision_bf_act_01_logFC)<-levels(dose_level)[-1]
for (i in levels(dose_level)[-1])
{
for(k in 1: nrow(data[["0"]]))
{
l_bf_act_01[[i]][k]<-bf_actual_01[[i]][[k]]$l_Bayes_factor_01
log_fold_change[[i]][k] = logFC(data[["0"]][k,],data[[i]][k,])
}
bf_act_01[[i]]<-exp(l_bf_act_01[[i]])
Decision_bf_act_01[[i]]<-ifelse(bf_act_01[[i]] > 1, "Fail to Reject H_0",ifelse( bf_act_01[[i]] <= 1 & bf_act_01 [[i]] > (1/3), "Weak evidence against H_0",ifelse(bf_act_01[[i]] <= (1/3) & bf_act_01[[i]] > (1/10), "Moderate evidence against H_0", ifelse(bf_act_01[[i]] <= (1/10) & bf_act_01[[i]] > (1/30), "Substantial evidence against H_0",ifelse(bf_act_01 [[i]]<= (1/30) & bf_act_01 [[i]] > (1/100), " Strong evidence against H_0", ifelse(bf_act_01 [[i]] <= (1/100) & bf_act_01 [[i]] > (1/300), "Very strong evidence against H_0", "Decisive evidence against H_0"))))))
Decision_bf_act_01_new[[i]]<-ifelse(Decision_bf_act_01[[i]] == "Fail to Reject H_0" | Decision_bf_act_01[[i]] == "Weak evidence against H_0", "Random", "Sig")
Decision_bf_act_01_new[[i]] <-factor(Decision_bf_act_01_new[[i]],levels = c("Sig","Random"))
abs_log_fold_change_mean[i]<-median(abs(log_fold_change[[i]]))
Decision_bf_act_01_logFC[[i]]<-ifelse(Decision_bf_act_01_new[[i]] == "Sig" &
abs(log_fold_change[[i]]) > abs_log_fold_change_mean[i], "Regulated", "Random")
Decision_bf_act_01_logFC[[i]]<-factor(Decision_bf_act_01_logFC[[i]],
levels = c("Regulated","Random"))
}
abs(log_fold_change[[i]])
abs_log_fold_change_mean[i]
abs_log_fold_change_mean
abs_log_fold_change_mean<-vector
abs_log_fold_change_mean
abs_log_fold_change_mean<-vector()
l_bf_act_01<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
bf_act_01<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01<- rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_new<- rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_logFC<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
log_fold_change<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
names(l_bf_act_01)<-levels(dose_level)[-1]
names(bf_act_01)<-levels(dose_level)[-1]
names(Decision_bf_act_01)<-levels(dose_level)[-1]
names(log_fold_change)<-levels(dose_level)[-1]
names(Decision_bf_act_01_new)<-levels(dose_level)[-1]
names(Decision_bf_act_01_logFC)<-levels(dose_level)[-1]
for (i in levels(dose_level)[-1])
{
for(k in 1: nrow(data[["0"]]))
{
l_bf_act_01[[i]][k]<-bf_actual_01[[i]][[k]]$l_Bayes_factor_01
log_fold_change[[i]][k] = logFC(data[["0"]][k,],data[[i]][k,])
}
bf_act_01[[i]]<-exp(l_bf_act_01[[i]])
Decision_bf_act_01[[i]]<-ifelse(bf_act_01[[i]] > 1, "Fail to Reject H_0",ifelse( bf_act_01[[i]] <= 1 & bf_act_01 [[i]] > (1/3), "Weak evidence against H_0",ifelse(bf_act_01[[i]] <= (1/3) & bf_act_01[[i]] > (1/10), "Moderate evidence against H_0", ifelse(bf_act_01[[i]] <= (1/10) & bf_act_01[[i]] > (1/30), "Substantial evidence against H_0",ifelse(bf_act_01 [[i]]<= (1/30) & bf_act_01 [[i]] > (1/100), " Strong evidence against H_0", ifelse(bf_act_01 [[i]] <= (1/100) & bf_act_01 [[i]] > (1/300), "Very strong evidence against H_0", "Decisive evidence against H_0"))))))
Decision_bf_act_01_new[[i]]<-ifelse(Decision_bf_act_01[[i]] == "Fail to Reject H_0" | Decision_bf_act_01[[i]] == "Weak evidence against H_0", "Random", "Sig")
Decision_bf_act_01_new[[i]] <-factor(Decision_bf_act_01_new[[i]],levels = c("Sig","Random"))
abs_log_fold_change_mean[i]<-median(abs(log_fold_change[[i]]))
Decision_bf_act_01_logFC[[i]]<-ifelse(Decision_bf_act_01_new[[i]] == "Sig" &
abs(log_fold_change[[i]]) > abs_log_fold_change_mean[i], "Regulated", "Random")
Decision_bf_act_01_logFC[[i]]<-factor(Decision_bf_act_01_logFC[[i]],
levels = c("Regulated","Random"))
}
Regulation_new<-ifelse(gene_metadata_clust1_short !=0, "Sig","Random")
c<-rep(list(data.frame()),nlevels(dose_level)-1)
names(c)<-levels(dose_level)[-1]
confusionMatrix_bf_act_01<-rep(list(list()),nlevels(dose_level)-1)
names(confusionMatrix_bf_act_01)<-levels(dose_level)[-1]
for(i in levels(dose_level)[-1])
{
c[[i]]<-data.frame(bf_act_01[[i]],Decision_bf_act_01_new[[i]],
Regulation_new,Decision_bf_act_01_logFC[[i]],
gene_metadata_clust1_short$abs_fc)
confusionMatrix_bf_act_01[[i]]<-caret::confusionMatrix(c[[i]]$Decision_bf_act_01_new..i..,
factor(c[[i]]$abs_fc,
levels = c("Sig","Random")))
colnames(c[[i]])<-c("BF_Test_Statistic","Pred Decision","True Decision","Pred Regulation",
"True Regulation")
rownames(c[[i]])<-rownames(data[["0"]])
}
#Save the list as a csv file
#lapply(c, function(x) write.table( data.frame(x), 'test.csv'  , append= T, sep=',' ))
capture.output(c, file = "test_file.txt")
capture.output(confusionMatrix_bf_act_01, file = "test_file_confusionMatrix.txt")
confusionMatrix_bf_act_01
c[["0.01"]]
abs_log_fold_change_mean<-vector()
l_bf_act_01<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
bf_act_01<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01<- rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_new<- rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_logFC<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
log_fold_change<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
names(l_bf_act_01)<-levels(dose_level)[-1]
names(bf_act_01)<-levels(dose_level)[-1]
names(Decision_bf_act_01)<-levels(dose_level)[-1]
names(log_fold_change)<-levels(dose_level)[-1]
names(Decision_bf_act_01_new)<-levels(dose_level)[-1]
names(Decision_bf_act_01_logFC)<-levels(dose_level)[-1]
for (i in levels(dose_level)[-1])
{
for(k in 1: nrow(data[["0"]]))
{
l_bf_act_01[[i]][k]<-bf_actual_01[[i]][[k]]$l_Bayes_factor_01
log_fold_change[[i]][k] = logFC(data[["0"]][k,],data[[i]][k,])
}
bf_act_01[[i]]<-exp(l_bf_act_01[[i]])
Decision_bf_act_01[[i]]<-ifelse(bf_act_01[[i]] > 1, "Fail to Reject H_0",ifelse( bf_act_01[[i]] <= 1 & bf_act_01 [[i]] > (1/3), "Weak evidence against H_0",ifelse(bf_act_01[[i]] <= (1/3) & bf_act_01[[i]] > (1/10), "Moderate evidence against H_0", ifelse(bf_act_01[[i]] <= (1/10) & bf_act_01[[i]] > (1/30), "Substantial evidence against H_0",ifelse(bf_act_01 [[i]]<= (1/30) & bf_act_01 [[i]] > (1/100), " Strong evidence against H_0", ifelse(bf_act_01 [[i]] <= (1/100) & bf_act_01 [[i]] > (1/300), "Very strong evidence against H_0", "Decisive evidence against H_0"))))))
Decision_bf_act_01_new[[i]]<-ifelse(Decision_bf_act_01[[i]] == "Fail to Reject H_0" | Decision_bf_act_01[[i]] == "Weak evidence against H_0", "Random", "Sig")
Decision_bf_act_01_new[[i]] <-factor(Decision_bf_act_01_new[[i]],levels = c("Sig","Random"))
abs_log_fold_change_median[i]<-median(abs(log_fold_change[[i]]))
Decision_bf_act_01_logFC[[i]]<-ifelse(Decision_bf_act_01_new[[i]] == "Sig" &
abs(log_fold_change[[i]]) > abs_log_fold_change_median[i], "Regulated", "Random")
Decision_bf_act_01_logFC[[i]]<-factor(Decision_bf_act_01_logFC[[i]],
levels = c("Regulated","Random"))
}
abs_log_fold_change_median<-vector()
l_bf_act_01<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
bf_act_01<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01<- rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_new<- rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_logFC<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
log_fold_change<-rep(list(vector(mode = "numeric",
length = nrow(data[["0"]]))), nlevels(dose_level)-1)
names(l_bf_act_01)<-levels(dose_level)[-1]
names(bf_act_01)<-levels(dose_level)[-1]
names(Decision_bf_act_01)<-levels(dose_level)[-1]
names(log_fold_change)<-levels(dose_level)[-1]
names(Decision_bf_act_01_new)<-levels(dose_level)[-1]
names(Decision_bf_act_01_logFC)<-levels(dose_level)[-1]
for (i in levels(dose_level)[-1])
{
for(k in 1: nrow(data[["0"]]))
{
l_bf_act_01[[i]][k]<-bf_actual_01[[i]][[k]]$l_Bayes_factor_01
log_fold_change[[i]][k] = logFC(data[["0"]][k,],data[[i]][k,])
}
bf_act_01[[i]]<-exp(l_bf_act_01[[i]])
Decision_bf_act_01[[i]]<-ifelse(bf_act_01[[i]] > 1, "Fail to Reject H_0",ifelse( bf_act_01[[i]] <= 1 & bf_act_01 [[i]] > (1/3), "Weak evidence against H_0",ifelse(bf_act_01[[i]] <= (1/3) & bf_act_01[[i]] > (1/10), "Moderate evidence against H_0", ifelse(bf_act_01[[i]] <= (1/10) & bf_act_01[[i]] > (1/30), "Substantial evidence against H_0",ifelse(bf_act_01 [[i]]<= (1/30) & bf_act_01 [[i]] > (1/100), " Strong evidence against H_0", ifelse(bf_act_01 [[i]] <= (1/100) & bf_act_01 [[i]] > (1/300), "Very strong evidence against H_0", "Decisive evidence against H_0"))))))
Decision_bf_act_01_new[[i]]<-ifelse(Decision_bf_act_01[[i]] == "Fail to Reject H_0" | Decision_bf_act_01[[i]] == "Weak evidence against H_0", "Random", "Sig")
Decision_bf_act_01_new[[i]] <-factor(Decision_bf_act_01_new[[i]],levels = c("Sig","Random"))
abs_log_fold_change_median[i]<-median(abs(log_fold_change[[i]]))
Decision_bf_act_01_logFC[[i]]<-ifelse(Decision_bf_act_01_new[[i]] == "Sig" &
abs(log_fold_change[[i]]) > abs_log_fold_change_median[i], "Regulated", "Random")
Decision_bf_act_01_logFC[[i]]<-factor(Decision_bf_act_01_logFC[[i]],
levels = c("Regulated","Random"))
}
Regulation_new<-ifelse(gene_metadata_clust1_short !=0, "Sig","Random")
c<-rep(list(data.frame()),nlevels(dose_level)-1)
names(c)<-levels(dose_level)[-1]
confusionMatrix_bf_act_01<-rep(list(list()),nlevels(dose_level)-1)
names(confusionMatrix_bf_act_01)<-levels(dose_level)[-1]
for(i in levels(dose_level)[-1])
{
c[[i]]<-data.frame(bf_act_01[[i]],Decision_bf_act_01_new[[i]],
Regulation_new,Decision_bf_act_01_logFC[[i]],
gene_metadata_clust1_short$abs_fc)
confusionMatrix_bf_act_01[[i]]<-caret::confusionMatrix(c[[i]]$Decision_bf_act_01_new..i..,
factor(c[[i]]$abs_fc,
levels = c("Sig","Random")))
colnames(c[[i]])<-c("BF_Test_Statistic","Pred Decision","True Decision","Pred Regulation",
"True Regulation")
rownames(c[[i]])<-rownames(data[["0"]])
}
#Save the list as a csv file
#lapply(c, function(x) write.table( data.frame(x), 'test.csv'  , append= T, sep=',' ))
capture.output(c, file = "test_file.txt")
capture.output(confusionMatrix_bf_act_01, file = "test_file_confusionMatrix.txt")
confusionMatrix_bf_act_01
confusionMatrix_bf_act_01[[30]]
confusionMatrix_bf_act_01[["30"]]
c[["30"]]
#Save the list as a csv file
#lapply(c, function(x) write.table( data.frame(x), 'test.csv'  , append= T, sep=',' ))
capture.output(c, file = "test_file.txt")
capture.output(confusionMatrix_bf_act_01, file = "test_file_confusionMatrix.txt")
#Save the list as a csv file
#lapply(c, function(x) write.table( data.frame(x), 'test.csv'  , append= T, sep=',' ))
capture.output(c, file = "clust_1_short_filtered_results.txt")
capture.output(confusionMatrix_bf_act_01, file = "clust_1_short_filtered_results_confusionMatrix.txt")
save(c, file="clust_1_short_filtered_results.Rdata")
load("/Users/satabdisaha/Documents/Documents/Summer 2019/Mouse Liver/Rance/clust_1_short_filtered_results.Rdata")
ls()
c
c[["0.1"]]
c[["0.03"]]
