"0","```r
#hESC data
#Find the top 100 higly varying genes
library(readr)
GeneOrdering <- read_csv(\"~/Documents/Documents/Summer_2019/Mouse_Liver/BEELINE/BEELINE-data/inputs/scRNA-Seq/hESC/GeneOrdering.csv\")
```"
"1","Missing column names filled in: 'X1' [1]
── Column specification ───────────────────────────────────────────────────────────────────────
cols(
  X1 = col_character(),
  VGAMpValue = col_double(),
  Variance = col_double()
)
"
"0","```r
colnames(GeneOrdering)[1]<-\"Gene_Names\"
genes_human<-GeneOrdering$Gene_Names
#Find the top 100 higly varying TF
human_tfs <- read_csv(\"~/Documents/Documents/Summer_2019/Mouse_Liver/BEELINE/human-tfs.csv\")
```"
"1","
── Column specification ───────────────────────────────────────────────────────────────────────
cols(
  TF = col_character(),
  Sources = col_character()
)
"
"0","```r
#Get the index positions of the intersecting mouse TF's among the gene names
c0<-match(human_tfs$TF,GeneOrdering$Gene_Names)
c0<-sort(c0[which(is.na(c0)==FALSE)])
#Recover all the significantly varying TF's
c1<-c0[which(GeneOrdering$VGAMpValue[c0]<0.05)]
sig_TF<-GeneOrdering$Gene_Names[c1]
#Get 500 significantly varying genes
c3<-order(GeneOrdering$Variance,decreasing = TRUE)
genes_500<-GeneOrdering$Gene_Names[c3][1:500]
#Get the union of the 500 HVG and all significantly varying TF's
nodes<-union(genes_500,sig_TF)

#Read the true STRING network
STRING_network <- as.data.frame(read_csv(\"~/Documents/Documents/Summer_2019/Mouse_Liver/BEELINE/Networks/human/STRING-network.csv\"))
```"
"1","
── Column specification ───────────────────────────────────────────────────────────────────────
cols(
  Gene1 = col_character(),
  Gene2 = col_character()
)
"
"0","```r
#Create an adjacency matrix from the STRING network
p1<-union(unique(STRING_network$Gene1),unique(STRING_network$Gene2))
STRING_network_human<-matrix(data = 0, nrow = length(p1),ncol=length(p1))
dimnames(STRING_network_human) = list(p1,p1)
for(i in 1: length(p1))
{
  STRING_network_human[STRING_network[i,1],STRING_network[i,2]]=1
  STRING_network_human[STRING_network[i,2],STRING_network[i,1]]=1
}
#Intersect the nodes of the STRING network with the union of genes and TF to recover the appropriate true network
c4<-match(nodes,p1)
c4<-c4[which(is.na(c4)==FALSE)]
STRING_network_human<-STRING_network_human[c4,c4] 
#This is a network of 1124 genes and TF's
#identical(rownames(STRING_network_mouse),p1[c4])

#Convert STRING network_human to linklist
library(igraph)
g<- graph.adjacency(STRING_network_human)
edge_list<-get.edgelist(g)
colnames(edge_list)<-c(\"Gene1\",\"Gene2\")

write.csv(edge_list,\"~/Documents/Documents/Summer_2019/Mouse_Liver/BEELINE/BEELINE-data/inputs/scRNA-Seq/hESC/refNetwork_500_HVG.csv\",row.names = FALSE,col.names = TRUE)
```"
"1","attempt to set 'col.names' ignored
"
"0","```r
#Save the names of the nodes
write.table(p1[c4],\"~/Documents/Documents/Summer_2019/Mouse_Liver/BEELINE/BEELINE-data/inputs/scRNA-Seq/hESC/500_HVG_TF.txt\",row.names = FALSE,col.names = FALSE)

#Read the complete gene expression data
ExpressionData <- read_csv(\"~/Documents/Documents/Summer_2019/Mouse_Liver/BEELINE/BEELINE-data/inputs/scRNA-Seq/hESC/ExpressionData.csv\")
```"
"1","Missing column names filled in: 'X1' [1]
── Column specification ───────────────────────────────────────────────────────────────────────
cols(
  .default = col_double(),
  X1 = col_character()
)
ℹ Use `spec()` for the full column specifications.
"
"0","```r
ExpressionData<-t(ExpressionData)
colnames(ExpressionData)<-ExpressionData[1,]
ExpressionData<-ExpressionData[-1,]
p5<-p1[c4]
#Subset gene expression data for top 100 HVG
xg<-match(tolower(p5),tolower(colnames(ExpressionData)))
xg<-xg[which(is.na(xg)==FALSE)]
ExpressionData<-subset(ExpressionData[,xg])
ExpressionData<-t(ExpressionData)

#Save the gene expression data for top 500 HVG+TF
write.csv(ExpressionData,\"~/Documents/Documents/Summer_2019/Mouse_Liver/BEELINE/BEELINE-data/inputs/scRNA-Seq/hESC/ExpressionData_500_HVG.csv\",row.names = TRUE,col.names = TRUE)
```"
"1","attempt to set 'col.names' ignored
"
