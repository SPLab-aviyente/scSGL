"0","```r
#Decisions for two group differential expression for only significant genes
l_bf_act_01<-rep(list(vector(mode = \"numeric\",
                             length = nrow(data_sig_genes_BF[[\"0\"]]))), nlevels(dose_level)-1)
bf_act_01<-rep(list(vector(mode = \"numeric\",
                             length = nrow(data_sig_genes_BF[[\"0\"]]))), nlevels(dose_level)-1)
Decision_bf_act_01<- rep(list(vector(mode = \"numeric\",
                             length = nrow(data_sig_genes_BF[[\"0\"]]))), nlevels(dose_level)-1)
Decision_bf_act_01_new<- rep(list(vector(mode = \"numeric\",
                             length = nrow(data_sig_genes_BF[[\"0\"]]))), nlevels(dose_level)-1)

names(l_bf_act_01)<-levels(dose_level)[-1]
names(bf_act_01)<-levels(dose_level)[-1]
names(Decision_bf_act_01)<-levels(dose_level)[-1]
names(Decision_bf_act_01_new)<-levels(dose_level)[-1]

for (i in levels(dose_level)[-1])
{
  for(k in 1: nrow(data_sig_genes_BF[[\"0\"]]))
  {
  l_bf_act_01[[i]][k]<-bf_actual_01[[i]][[k]]$l_Bayes_factor_01
  }
  bf_act_01[[i]]<-exp(l_bf_act_01[[i]])
  Decision_bf_act_01[[i]]<-ifelse(bf_act_01[[i]] > 1, \"Fail to Reject H_0\",ifelse( bf_act_01[[i]] <= 1 & bf_act_01 [[i]] > (1/3), \"Weak evidence against H_0\",ifelse(bf_act_01[[i]] <= (1/3) & bf_act_01[[i]] > (1/10), \"Moderate evidence against H_0\", ifelse(bf_act_01[[i]] <= (1/10) & bf_act_01[[i]] > (1/30), \"Substantial evidence against H_0\",ifelse(bf_act_01 [[i]]<= (1/30) & bf_act_01 [[i]] > (1/100), \" Strong evidence against H_0\", ifelse(bf_act_01 [[i]] <= (1/100) & bf_act_01 [[i]] > (1/300), \"Very strong evidence against H_0\", \"Decisive evidence against H_0\")))))) 
Decision_bf_act_01_new[[i]]<-ifelse(Decision_bf_act_01[[i]] == \"Fail to Reject H_0\" | Decision_bf_act_01[[i]] == \"Weak evidence against H_0\" |
                    Decision_bf_act_01[[i]] == \"Moderate evidence against H_0\", \"Negative\", \"Positive\")
Decision_bf_act_01_new[[i]] <-
                          factor(Decision_bf_act_01_new[[i]],levels = c(\"Positive\",\"Negative\"))

}
True_decision<-ifelse(simulated.gene.metadata$Model!=\"Unchanged\",  \"Positive\",\"Negative\")
names(True_decision)<-rownames(data[[\"0\"]])
True_decision_sig_genes_BF_01<-True_decision[sig_genes_BF]
True_decision_sig_genes_BF_01<-factor(True_decision_sig_genes_BF_01, levels = c(\"Positive\",\"Negative\"))
names(True_decision_sig_genes_BF_01)<-rownames(data_sig_genes_BF[[\"0\"]])

c<-rep(list(data.frame()),nlevels(dose_level)-1)
names(c)<-levels(dose_level)[-1]
confusionMatrix_bf_act_01<-rep(list(list()),nlevels(dose_level)-1)
names(confusionMatrix_bf_act_01)<-levels(dose_level)[-1]
for(i in levels(dose_level)[-1])
{
  c[[i]]<-data.frame(bf_act_01[[i]],Decision_bf_act_01_new[[i]],
                     True_decision_sig_genes_BF_01)
  confusionMatrix_bf_act_01[[i]]<-caret::confusionMatrix(c[[i]]$Decision_bf_act_01_new..i..,
                                    factor(c[[i]]$True_decision_sig_genes_BF_01, 
                                           levels = c(\"Positive\",\"Negative\")))
  colnames(c[[i]])<-c(\"BF_Test_Statistic\",\"Pred Decision\",\"True Decision\")
  rownames(c[[i]])<-rownames(data_sig_genes_BF[[\"0\"]])
}
#Save the list as a csv file
#lapply(c, function(x) write.table( data.frame(x), 'test.csv'  , append= T, sep=',' ))
#capture.output(c, file = \"clust_1_short_filtered_results.txt\")
#capture.output(confusionMatrix_bf_act_01, file = \"clust_1_short_filtered_results_confusionMatrix.txt\")
#save(c, file=\"simulated_data_results.Rdata\")

```"
