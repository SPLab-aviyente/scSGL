graphStructure <- function(nnodes, low.strength, sup.strength, pattern ="hubs", nhubs, 
                           alpha = 2.3, degree.hubs, nOtherEdges, orderNodes=0, 
                           seed = 200, plus = 0, prob=0.05, probSign=0.5)
{
  p           <- nnodes  
  HUBS.NODES  <- 0
  NON.CON.EDG <- 0

if(pattern == "powerLaw")
{
  # power law distribution (probability of degree k)
  Pk          <- apply(as.matrix(1:30),1, function(k) (k + plus)^(-alpha)/ (VGAM::zeta(alpha) )  )
  set.seed(seed+19)
  rm1         <- rmultinom(1, nnodes, prob = Pk)
  DEGREE      <- do.call(c,apply(as.matrix(1:length(rm1)),1,function(i) if (rm1[i]>0) rep(i,rm1[i])))
  degreeVert  <- DEGREE[sample(1:length(DEGREE))]
  VV          <- apply(as.matrix(1:nnodes),1,function(i) rep(i,degreeVert[i]))
  if(class(VV)=="list")   Vert.num    <- do.call(c,VV)
  else   Vert.num    <- VV
  
  if(length(Vert.num)>0){
    stub.num    <- 1:length(Vert.num)
    OP          <- stub.num
    Connections <- array(0,dim=c(length(OP)/2,2))
    co          <- 1
    while( length(OP) > 1 ){
      Connections[co,] <- sample(OP)[1:2]
      OP <- OP[-c(which(OP == Connections[co,1]), which(OP == Connections[co,2]) )]
      co <- co + 1
    }
    
    Vert.conn         <- cbind(Vert.num[Connections[,1]],Vert.num[Connections[,2]])
    correctEdg        <- apply(Vert.conn,1,function(x) x[1]!=x[2])
    EdgesToChange2    <- Vert.conn[correctEdg,] 
    EdgesToChange1    <- EdgesToChange2 + orderNodes
  }
  else
    stop("zero vertices in the graph")
  
}