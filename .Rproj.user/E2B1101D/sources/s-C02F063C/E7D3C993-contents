get_mix_parameters = function(count, point = log10(1.01), ncores = 8){
  count = as.matrix(count)
  null_genes = which(abs(rowSums(count) - point * ncol(count)) < 1e-10)
  parslist = mclapply(1:nrow(count), function(ii) {
    if (ii %% 2000 == 0) {gc()}
    if (ii %in% null_genes) {return(rep(NA, 5))}
    xdata = count[ii, ]
    paramt = try(get_mix(xdata, point), silent = TRUE)
    if (class(paramt) == "try-error"){
      paramt = rep(NA, 5)
      return(paramt)
    }
    ### LRT
    l1a = dgamma(count[ii,], shape = paramt[2], rate = paramt[3])
    l1b = dnorm(count[ii,], mean = paramt[4], sd = paramt[5])
    l1 = sum(log(paramt[1] * l1a + (1-paramt[1]) * l1b))
    mu = mean(count[ii,]); sd = sd(count[ii,])
    l2 = sum(log(dnorm(count[ii,], mean = mu, sd = sd)))
    pval = pchisq(-2*(l2-l1), df = 1, lower.tail = FALSE)
    if(pval >= 0.05/nrow(count)) paramt = c(0, 1, 1, mu, sd)
    return(paramt)
  }, mc.cores = ncores)
  parslist = Reduce(rbind, parslist)
  colnames(parslist) = c("rate", "alpha", "beta", "mu", "sigma")
  # saveRDS(parslist, file = path)
  return(parslist)
}