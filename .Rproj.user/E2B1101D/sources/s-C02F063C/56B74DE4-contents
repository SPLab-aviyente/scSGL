generate.network = function(p, pos, neg) {
  
  # Generate matrix values, sampling 0 or 1 with given probabilities
  matvals = sample(c(0, 1,-1), p * (p - 1)/2, replace = TRUE, prob = c(1-pos-neg,pos,
                                                                       neg))
  
# From the values above, generate a symmetric matrix
  networkmat = matrix(rep(0, p * p), ncol = p)
  mv = 1
  for (i in 1:p) {
    for (j in 1:p) {
      if (i > j) {
        networkmat[i, j] = matvals[mv]
        networkmat[j, i] = matvals[mv]
        mv = mv + 1
      }
    }
  }
  return(networkmat)
}
p=100;
(network <- generate.network(p, 0.05,0.05))
dimnames(network)<-list(rownames(zinb_data_lognormalized),rownames(zinb_data_lognormalized))
write.csv(network,"/Users/satabdisaha/Documents/Documents/Summer_2019/scSGL/scSGL/Simulation/Datasets/refNetwork_100_genes_density_0.1.csv",
          row.names = TRUE,col.names = TRUE)
cormat<-matrix(data=NA,nrow=nrow(network),ncol=ncol(network))
# Generate covariance matrix
for(i in 1:nrow(network)){
  for(j in 1:nrow(network)){
    if(i > j){
      if(network [i,j] == -1){
        cormat[i,j] =runif(1,-0.7,-0.4) 
        cormat[j,i] = cormat[i,j]
      }
      else if (network [i,j] == +1){
        cormat[i,j] =runif(1,0.4,0.7)
        cormat[j,i] = cormat[i,j]
      }
      else {
        cormat[i,j] = 0
        cormat[j,i] = cormat[i,j]
      }
      }
    if (i == j){
      cormat[i,j] = cormat[j,i] = 1
    }
  }
}
diag(cormat)<-abs(min(eigen(cormat)$values))+1.1
matrixcalc::is.positive.definite(cormat)
#mean(pbmc_300f_CD4T_count_mean[1:nrow(network)])
mean_mult_norm<-pbmc_300f_CD4T_count_mean[names(pbmc_300f_CD4T_count_mean)[1:p]]
covmat<-as.matrix(cov2cor(solve(cormat)))
n=500
set.seed(99)
mult_norm_data<-mvtnorm::rmvnorm(n,mean_mult_norm,as.matrix(covmat))
colnames(mult_norm_data)<-sprintf("%s %i","Gene",seq(1:ncol(
  mult_norm_data)))
rownames(mult_norm_data)<-sprintf("%s %i","Cell",seq(1:nrow(
  mult_norm_data)))
write.csv(mult_norm_data,"/Users/satabdisaha/Documents/Documents/Summer_2019/scSGL/scSGL/Simulation/Datasets/MultivariteNormalData_100_genes_500_cells.csv",
          row.names = TRUE,col.names = TRUE)

# dropout_prob<-exp(-0.1* (mult_norm_data^2))
# bern_ind<-matrix(NA,n,p)
# for(i in 1:n)
# {
#   for(j in 1: p)
#   {
#     bern_ind[i,j]<-rbinom(1,1,dropout_prob[i,j]) 
#   }
# }
# mult_norm_data_dropout<-mult_norm_data*bern_ind

exp_fun<-function(rho,mult_norm_data){
  prob<- (exp(-rho * (mult_norm_data^2) )) 
  drop_prob<-matrix(NA,n,p)
  for(i in 1: n)
  {
    for(j in 1: p)
    {
      drop_prob[i,j]<-rbinom(1,1,prob[i,j])
    }
  }
  omega<-colMeans(drop_prob)
  return(omega)
}
omega<-exp_fun(0.1,mult_norm_data)
#omega-0.01 leads to dropout rate of 0.533 in log-ZINB data
#omega-0.03 leads to dropout rate of 0.389 in log-ZINB data
#omega-0.1 leads to dropout rate of 0.286 in log-ZINB data
#omega-0.5 leads to dropout rate of 0.2143 in log-ZINB data
#omega-10 leads to dropout rate of 0.1654 in log-ZINB data


# generate count data y following zero-inflated negative-binomial distribution 
#Learn lambda parameter for every gene
#Learn mean, SD and zero inflation parameter for every gene by fitting negative binomial distribution
sd_mult_norm<-pbmc_300f_CD4T_count_sd[names(pbmc_300f_CD4T_count_mean)[1:p]]
library(ZIM)
zinb_data <- mult_norm_data
set.seed(99)
for(j in 1:p)
{
  dat <- mult_norm_data[,j]
  mu_v <- mean(dat)
  sd_v <- sd(dat)
  p_v <- pnorm(dat,mu_v,sd_v)
  zinb_data[,j] <- qzinb(p = p_v, k=sd_mult_norm[j], lambda= mean_mult_norm[j], 
                         omega=omega[j])
                         #omega=pbmc_300f_CD4T_count_dropout[j])
}

colnames(zinb_data)<-sprintf("%s %i","Gene",seq(1:ncol(
  zinb_data)))
rownames(zinb_data)<-sprintf("%s %i","Cell",seq(1:nrow(
  zinb_data)))
write.csv(zinb_data,"/Users/satabdisaha/Documents/Documents/Summer_2019/scSGL/scSGL/Simulation/Datasets/Count(ZINB)_Expression_Data_100_genes_500_cells.csv",
          row.names = TRUE,col.names = TRUE)


zinb_data_gene_mean<-apply(zinb_data,2,mean)
zinb_data_gene_mean_pos<-apply(zinb_data,2 , function(x) mean(x[x>0]))
zinb_data_gene_sd<-apply(zinb_data,2,sd)
zinb_data_gene_sd_pos<-apply(zinb_data,2,function(x) sd(x[x>0]))
zinb_data_gene_dropout<-apply(zinb_data,2,function(x)
                              length(which(x==0))/length(x))
par(mfrow=c(1,3))
plot(zinb_data_gene_mean,pbmc_300f_CD4T_count_mean[1:nrow(network)])
plot(zinb_data_gene_sd,pbmc_300f_CD4T_count_sd[1:nrow(network)])
plot(zinb_data_gene_dropout,pbmc_300f_CD4T_count_dropout[1:nrow(network)])

dev.off()
plot(zinb_data_gene_mean_pos,zinb_data_gene_dropout)
plot(pbmc_300f_CD4T_count_mean_pos[1:nrow(network)],
     pbmc_300f_CD4T_count_dropout[1:nrow(network)])
plot(zinb_data_gene_mean_pos,zinb_data_gene_mean)
plot(pbmc_300f_CD4T_count_mean_pos[1:nrow(network)],
     pbmc_300f_CD4T_count_mean[1:nrow(network)])
plot(zinb_data_gene_mean,zinb_data_gene_dropout)
plot(pbmc_300f_CD4T_count_mean[1:nrow(network)],
     pbmc_300f_CD4T_count_dropout[1:nrow(network)])
plot(zinb_data_gene_mean_pos,zinb_data_gene_sd_pos)
plot(pbmc_300f_CD4T_count_mean_pos[1:nrow(network)],
     pbmc_300f_CD4T_count_sd_pos[1:nrow(network)])




zinb_data_lognormalized<-as.matrix(LogNormalize(t(zinb_data)))
rownames(zinb_data_lognormalized)<-sprintf("%s %i","Gene",seq(1:nrow(
  zinb_data_lognormalized)))
colnames(zinb_data_lognormalized)<-sprintf("%s %i","Cell",seq(1:ncol(
  zinb_data_lognormalized)))
write.csv(zinb_data_lognormalized,"/Users/satabdisaha/Documents/Documents/Summer_2019/scSGL/scSGL/Simulation/Datasets/LogNormalized_Expression_Data.csv",
          row.names = TRUE,col.names = TRUE)


##########################################################################
zinb_data_lognormalized_indicator<-apply(zinb_data_lognormalized, 2,
                                  function(x) ifelse(x>0,1,0) )
mean_zinb_data_lognormalized<-apply(zinb_data_lognormalized,1, mean)
sd_zinb_data_lognormalized<-apply(zinb_data_lognormalized,1, sd)
dropout_zinb_data_lognormalized<-apply(zinb_data_lognormalized,1, function(x) length(which(x==0))/length(x))
mean(dropout_zinb_data_lognormalized)
dev.off()
plot(mean_zinb_data_lognormalized,dropout_zinb_data_lognormalized)

library(readr)
##############
refNetwork_100_genes_density_0_1  <- read_csv("Simulation/Datasets/Random_Network/Varying_Dropouts/100_genes_500_cells_density_0.05_random_network_Mean_Dropout_0.533/refNetwork_100_genes_density_0.05.csv")
refNetwork_100_genes_density_0_1 <-refNetwork_100_genes_density_0_1 [,-1]
rownames(refNetwork_100_genes_density_0_1 )<-colnames(refNetwork_100_genes_density_0_1 )
refNetwork_100_genes_density_0_1 <-abs(refNetwork_100_genes_density_0_1 )
g  <- graph.adjacency(as.matrix(refNetwork_100_genes_density_0_1 ))
df <- get.data.frame(g)
colnames(df)<-c("Gene1","Gene2")
head(df)
write.csv(df,"Simulation/Datasets/Random_Network/Varying_Dropouts/100_genes_500_cells_density_0.05_random_network_Mean_Dropout_0.533/refNetwork.csv")

